# The font families to use.
font-family = "JetBrainsMono Nerd Font"
font-size = 10
font-style = default
font-style-bold = default
font-style-italic = default
font-style-bold-italic = default
font-synthetic-style = bold,italic,bold-italic

# Theme configuration
theme = catppuccin-mocha

# Remove custom background/foreground as they'll be provided by the theme
selection-invert-fg-bg = false
minimum-contrast = 1

# Terminal settings
scrollback-limit = 10000000
link-url = true
copy-on-select = true

# Window settings
window-padding-x = 10
window-padding-y = 10
window-theme = dark
window-decoration = false
background-opacity = 0.95
window-save-state = always

# Cursor settings
cursor-style = block
cursor-invert-fg-bg = true
cursor-opacity = 0.9
cursor-style-blink = false

# Mouse settings
mouse-hide-while-typing = true
copy-on-select = true
confirm-close-surface = false

# GTK settings
gtk-titlebar = true

# macOS settings
macos-option-as-alt = true
macos-non-native-fullscreen = true

# Key bindings. The format is `trigger=action`. Duplicate triggers will
# overwrite previously set values. The list of actions is available in
# the documentation or using the `ghostty +list-actions` command.
keybind = ctrl+comma=open_config
keybind = ctrl+alt+up=goto_split:top
keybind = ctrl+page_down=next_tab
keybind = ctrl+shift+v=paste_from_clipboard
keybind = shift+insert=paste_from_selection
keybind = ctrl+shift+a=select_all
keybind = shift+up=adjust_selection:up
keybind = alt+five=goto_tab:5
keybind = super+ctrl+right_bracket=goto_split:next
keybind = ctrl+equal=increase_font_size:1
keybind = ctrl+shift+o=new_split:right
keybind = ctrl+shift+c=copy_to_clipboard
keybind = ctrl+shift+q=quit
keybind = ctrl+shift+n=new_window
keybind = ctrl+shift+page_down=jump_to_prompt:1
keybind = ctrl+shift+comma=reload_config
keybind = ctrl+minus=decrease_font_size:1
keybind = shift+left=adjust_selection:left
keybind = super+ctrl+shift+up=resize_split:up,10
keybind = alt+eight=goto_tab:8
keybind = shift+page_up=scroll_page_up
keybind = ctrl+alt+shift+j=write_scrollback_file:open
keybind = ctrl+shift+left=previous_tab
keybind = ctrl+shift+w=close_surface
keybind = super+ctrl+shift+equal=equalize_splits
keybind = shift+end=scroll_to_bottom
keybind = ctrl+zero=reset_font_size
keybind = alt+three=goto_tab:3
keybind = ctrl+shift+j=write_scrollback_file:paste
keybind = ctrl+enter=toggle_fullscreen
keybind = ctrl+page_up=previous_tab
keybind = shift+right=adjust_selection:right
keybind = ctrl+tab=next_tab
keybind = ctrl+alt+left=goto_split:left
keybind = shift+page_down=scroll_page_down
keybind = ctrl+shift+right=next_tab
keybind = ctrl+shift+page_up=jump_to_prompt:-1
keybind = alt+nine=goto_tab:9
keybind = ctrl+shift+t=new_tab
keybind = shift+down=adjust_selection:down
keybind = super+ctrl+shift+left=resize_split:left,10
keybind = ctrl+shift+tab=previous_tab
keybind = alt+two=goto_tab:2
keybind = ctrl+alt+down=goto_split:bottom
keybind = super+ctrl+shift+down=resize_split:down,10
keybind = super+ctrl+shift+right=resize_split:right,10
keybind = ctrl+plus=increase_font_size:1
keybind = alt+four=goto_tab:4
keybind = ctrl+shift+e=new_split:down
keybind = ctrl+alt+right=goto_split:right
keybind = alt+f4=close_window
keybind = alt+one=goto_tab:1
keybind = ctrl+shift+enter=toggle_split_zoom
keybind = shift+home=scroll_to_top
keybind = super+ctrl+left_bracket=goto_split:previous
keybind = ctrl+shift+i=inspector:toggle
keybind = alt+six=goto_tab:6
keybind = alt+seven=goto_tab:7

# Horizontal window padding. This applies padding between the terminal cells
# and the left and right window borders. The value is in points, meaning that
# it will be scaled appropriately for screen DPI.
#
# If this value is set too large, the screen will render nothing, because the
# grid will be completely squished by the padding. It is up to you as the user
# to pick a reasonable value. If you pick an unreasonable value, a warning
# will appear in the logs.
#
# Changing this configuration at runtime will only affect new terminals, i.e.
# new windows, tabs, etc.
#
# To set a different left and right padding, specify two numerical values
# separated by a comma. For example, `window-padding-x = 2,4` will set the
# left padding to 2 and the right padding to 4. If you want to set both
# paddings to the same value, you can use a single value. For example,
# `window-padding-x = 2` will set both paddings to 2.
window-padding-x = 10

# Vertical window padding. This applies padding between the terminal cells and
# the top and bottom window borders. The value is in points, meaning that it
# will be scaled appropriately for screen DPI.
#
# If this value is set too large, the screen will render nothing, because the
# grid will be completely squished by the padding. It is up to you as the user
# to pick a reasonable value. If you pick an unreasonable value, a warning
# will appear in the logs.
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.
#
# To set a different top and bottom padding, specify two numerical values
# separated by a comma. For example, `window-padding-y = 2,4` will set the
# top padding to 2 and the bottom padding to 4. If you want to set both
# paddings to the same value, you can use a single value. For example,
# `window-padding-y = 2` will set both paddings to 2.
window-padding-y = 10

# The viewport dimensions are usually not perfectly divisible by the cell
# size. In this case, some extra padding on the end of a column and the bottom
# of the final row may exist. If this is `true`, then this extra padding
# is automatically balanced between all four edges to minimize imbalance on
# one side. If this is `false`, the top left grid cell will always hug the
# edge with zero padding other than what may be specified with the other
# `window-padding` options.
#
# If other `window-padding` fields are set and this is `true`, this will still
# apply. The other padding is applied first and may affect how many grid cells
# actually exist, and this is applied last in order to balance the padding
# given a certain viewport size and grid cell size.
window-padding-balance = false

# The color of the padding area of the window. Valid values are:
#
# * `background` - The background color specified in `background`.
# * `extend` - Extend the background color of the nearest grid cell.
# * `extend-always` - Same as "extend" but always extends without applying
#   any of the heuristics that disable extending noted below.
#
# The "extend" value will be disabled in certain scenarios. On primary
# screen applications (i.e. not something like Neovim), the color will not
# be extended vertically if any of the following are true:
#
# * The nearest row has any cells that have the default background color.
#   The thinking is that in this case, the default background color looks
#   fine as a padding color.
# * The nearest row is a prompt row (requires shell integration). The
#   thinking here is that prompts often contain powerline glyphs that
#   do not look good extended.
# * The nearest row contains a perfect fit powerline character. These
#   don't look good extended.
#
window-padding-color = extend

# This setting is only supported currently on macOS.
window-vsync = true

# If true, new windows and tabs will inherit the working directory of the
# previously focused window. If no window was previously focused, the default
# working directory will be used (the `working-directory` option).
window-inherit-working-directory = true

# If true, new windows and tabs will inherit the font size of the previously
# focused window. If no window was previously focused, the default font size
# will be used. If this is false, the default font size specified in the
# configuration `font-size` will be used.
window-inherit-font-size = true

# Valid values:
#
#   * `true`
#   * `false` - windows won't have native decorations, i.e. titlebar and
#      borders. On macOS this also disables tabs and tab overview.
#
# The "toggle_window_decorations" keybind action can be used to create
# a keybinding to toggle this setting at runtime.
#
# Changing this configuration in your configuration and reloading will
# only affect new windows. Existing windows will not be affected.
#
# macOS: To hide the titlebar without removing the native window borders
#        or rounded corners, use `macos-titlebar-style = hidden` instead.
window-decoration = false
window-title-font-family = "JetBrainsMono Nerd Font"
macos-titlebar-style = "transparent"

# The font that will be used for the application's window and tab titles.
#
# This is currently only supported on macOS.
window-title-font-family =

# The theme to use for the windows. Valid values:
#
#   * `auto` - Determine the theme based on the configured terminal
#      background color. This has no effect if the "theme" configuration
#      has separate light and dark themes. In that case, the behavior
#      of "auto" is equivalent to "system".
#   * `system` - Use the system theme.
#   * `light` - Use the light theme regardless of system theme.
#   * `dark` - Use the dark theme regardless of system theme.
#   * `ghostty` - Use the background and foreground colors specified in the
#     Ghostty configuration. This is only supported on Linux builds with
#     Adwaita and `gtk-adwaita` enabled.
#
# On macOS, if `macos-titlebar-style` is "tabs", the window theme will be
# automatically set based on the luminosity of the terminal background color.
# This only applies to terminal windows. This setting will still apply to
# non-terminal windows within Ghostty.
#
# This is currently only supported on macOS and Linux.
window-theme = dark

# The colorspace to use for the terminal window. The default is `srgb` but
# this can also be set to `display-p3` to use the Display P3 colorspace.
#
# Changing this value at runtime will only affect new windows.
#
# This setting is only supported on macOS.
window-colorspace = srgb

# The initial window size. This size is in terminal grid cells by default.
# Both values must be set to take effect. If only one value is set, it is
# ignored.
#
# We don't currently support specifying a size in pixels but a future change
# can enable that. If this isn't specified, the app runtime will determine
# some default size.
#
# Note that the window manager may put limits on the size or override the
# size. For example, a tiling window manager may force the window to be a
# certain size to fit within the grid. There is nothing Ghostty will do about
# this, but it will make an effort.
#
# Sizes larger than the screen size will be clamped to the screen size.
# This can be used to create a maximized-by-default window size.
#
# This will not affect new tabs, splits, or other nested terminal elements.
# This only affects the initial window size of any new window. Changing this
# value will not affect the size of the window after it has been created. This
# is only used for the initial size.
#
# BUG: On Linux with GTK, the calculated window size will not properly take
# into account window decorations. As a result, the grid dimensions will not
# exactly match this configuration. If window decorations are disabled (see
# window-decorations), then this will work as expected.
#
# Windows smaller than 10 wide by 4 high are not allowed.
window-height = 0

window-width = 0

# Resize the window in discrete increments of the focused surface's cell size.
# If this is disabled, surfaces are resized in pixel increments. Currently
# only supported on macOS.
window-step-resize = false

# The position where new tabs are created. Valid values:
#
#   * `current` - Insert the new tab after the currently focused tab,
#     or at the end if there are no focused tabs.
#
#   * `end` - Insert the new tab at the end of the tab list.
window-new-tab-position = current

# This controls when resize overlays are shown. Resize overlays are a
# transient popup that shows the size of the terminal while the surfaces are
# being resized. The possible options are:
#
#   * `always` - Always show resize overlays.
#   * `never` - Never show resize overlays.
#   * `after-first` - The resize overlay will not appear when the surface
#                     is first created, but will show up if the surface is
#                     subsequently resized.
#
# The default is `after-first`.
resize-overlay = after-first

# If resize overlays are enabled, this controls the position of the overlay.
# The possible options are:
#
#   * `center`
#   * `top-left`
#   * `top-center`
#   * `top-right`
#   * `bottom-left`
#   * `bottom-center`
#   * `bottom-right`
#
# The default is `center`.
resize-overlay-position = center

# If resize overlays are enabled, this controls how long the overlay is
# visible on the screen before it is hidden. The default is ¾ of a second or
# 750 ms.
#
# The duration is specified as a series of numbers followed by time units.
# Whitespace is allowed between numbers and units. Each number and unit will
# be added together to form the total duration.
#
# The allowed time units are as follows:
#
#   * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments
#     are made for leap years or leap seconds.
#   * `d` - one SI day, or 86400 seconds.
#   * `h` - one hour, or 3600 seconds.
#   * `m` - one minute, or 60 seconds.
#   * `s` - one second.
#   * `ms` - one millisecond, or 0.001 second.
#   * `us` or `µs` - one microsecond, or 0.000001 second.
#   * `ns` - one nanosecond, or 0.000000001 second.
#
# Examples:
#   * `1h30m`
#   * `45s`
#
# Units can be repeated and will be added together. This means that
# `1h1h` is equivalent to `2h`. This is confusing and should be avoided.
# A future update may disallow this.
#
# The maximum value is `584y 49w 23h 34m 33s 709ms 551µs 615ns`. Any
# value larger than this will be clamped to the maximum value.
resize-overlay-duration = 750ms

# If true, when there are multiple split panes, the mouse selects the pane
# that is focused. This only applies to the currently focused window; i.e.
# mousing over a split in an unfocused window will now focus that split
# and bring the window to front.
#
# Default is false.
focus-follows-mouse = false

# Whether to allow programs running in the terminal to read/write to the
# system clipboard (OSC 52, for googling). The default is to allow clipboard
# reading after prompting the user and allow writing unconditionally.
#
# Valid values are:
#
#   * `ask`
#   * `allow`
#   * `deny`
#
clipboard-read = allow

clipboard-write = allow
# Trims trailing whitespace on data that is copied to the clipboard. This does
# not affect data sent to the clipboard via `clipboard-write`.
clipboard-trim-trailing-spaces = true

# Require confirmation before pasting text that appears unsafe. This helps
# prevent a "copy/paste attack" where a user may accidentally execute unsafe
# commands by pasting text with newlines.
clipboard-paste-protection = true

# If true, bracketed pastes will be considered safe. By default, bracketed
# pastes are considered safe. "Bracketed" pastes are pastes while the running
# program has bracketed paste mode enabled (a setting set by the running
# program, not the terminal emulator).
clipboard-paste-bracketed-safe = true

# The total amount of bytes that can be used for image data (i.e. the Kitty
# image protocol) per terminal screen. The maximum value is 4,294,967,295
# (4GiB). The default is 320MB. If this is set to zero, then all image
# protocols will be disabled.
#
# This value is separate for primary and alternate screens so the effective
# limit per surface is double.
image-storage-limit = 320000000

# Whether to automatically copy selected text to the clipboard. `true`
# will prefer to copy to the selection clipboard if supported by the
# OS, otherwise it will copy to the system clipboard.
#
# The value `clipboard` will always copy text to the selection clipboard
# (for supported systems) as well as the system clipboard. This is sometimes
# a preferred behavior on Linux.
#
# Middle-click paste will always use the selection clipboard on Linux
# and the system clipboard on macOS. Middle-click paste is always enabled
# even if this is `false`.
#
# The default value is true on Linux and false on macOS. macOS copy on
# select behavior is not typical for applications so it is disabled by
# default. On Linux, this is a standard behavior so it is enabled by
# default.
copy-on-select = true

# The time in milliseconds between clicks to consider a click a repeat
# (double, triple, etc.) or an entirely new single click. A value of zero will
# use a platform-specific default. The default on macOS is determined by the
# OS settings. On every other platform it is 500ms.
click-repeat-interval = 0

# Additional configuration files to read. This configuration can be repeated
# to read multiple configuration files. Configuration files themselves can
# load more configuration files. Paths are relative to the file containing the
# `config-file` directive. For command-line arguments, paths are relative to
# the current working directory.
#
# Prepend a ? character to the file path to suppress errors if the file does
# not exist. If you want to include a file that begins with a literal ?
# character, surround the file path in double quotes (").
#
# Cycles are not allowed. If a cycle is detected, an error will be logged and
# the configuration file will be ignored.
#
# Configuration files are loaded after the configuration they're defined
# within in the order they're defined. **THIS IS A VERY SUBTLE BUT IMPORTANT
# POINT.** To put it another way: configuration files do not take effect
# until after the entire configuration is loaded. For example, in the
# configuration below:
#
# ```
# config-file = "foo"
# a = 1
# ```
#
# If "foo" contains `a = 2`, the final value of `a` will be 2, because
# `foo` is loaded after the configuration file that configures the
# nested `config-file` value.
config-file =

# When this is true, the default configuration file paths will be loaded.
# The default configuration file paths are currently only the XDG
# config path ($XDG_CONFIG_HOME/ghostty/config).
#
# If this is false, the default configuration paths will not be loaded.
# This is targeted directly at using Ghostty from the CLI in a way
# that minimizes external effects.
#
# This is a CLI-only configuration. Setting this in a configuration file
# will have no effect. It is not an error, but it will not do anything.
# This configuration can only be set via CLI arguments.
config-default-files = true

# Confirms that a surface should be closed before closing it. This defaults to
# true. If set to false, surfaces will close without any confirmation.
confirm-close-surface = false

# Whether or not to quit after the last surface is closed.
#
# This defaults to `false` on macOS since that is standard behavior for
# a macOS application. On Linux, this defaults to `true` since that is
# generally expected behavior.
#
# On Linux, if this is `true`, Ghostty can delay quitting fully until a
# configurable amount of time has passed after the last window is closed.
# See the documentation of `quit-after-last-window-closed-delay`.
quit-after-last-window-closed = true

# Controls how long Ghostty will stay running after the last open surface has
# been closed. This only has an effect if `quit-after-last-window-closed` is
# also set to `true`.
#
# The minimum value for this configuration is `1s`. Any values lower than
# this will be clamped to `1s`.
#
# The duration is specified as a series of numbers followed by time units.
# Whitespace is allowed between numbers and units. Each number and unit will
# be added together to form the total duration.
#
# The allowed time units are as follows:
#
#   * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments
#     are made for leap years or leap seconds.
#   * `d` - one SI day, or 86400 seconds.
#   * `h` - one hour, or 3600 seconds.
#   * `m` - one minute, or 60 seconds.
#   * `s` - one second.
#   * `ms` - one millisecond, or 0.001 second.
#   * `us` or `µs` - one microsecond, or 0.000001 second.
#   * `ns` - one nanosecond, or 0.000000001 second.
#
# Examples:
#   * `1h30m`
#   * `45s`
#
# Units can be repeated and will be added together. This means that
# `1h1h` is equivalent to `2h`. This is confusing and should be avoided.
# A future update may disallow this.
#
# The maximum value is `584y 49w 23h 34m 33s 709ms 551µs 615ns`. Any
# value larger than this will be clamped to the maximum value.
#
# By default `quit-after-last-window-closed-delay` is unset and
# Ghostty will quit immediately after the last window is closed if
# `quit-after-last-window-closed` is `true`.
#
# Only implemented on Linux.
quit-after-last-window-closed-delay =

# This controls whether an initial window is created when Ghostty
# is run. Note that if `quit-after-last-window-closed` is `true` and
# `quit-after-last-window-closed-delay` is set, setting `initial-window` to
# `false` will mean that Ghostty will quit after the configured delay if no
# window is ever created. Only implemented on Linux and macOS.
initial-window = true

# The position of the "quick" terminal window. To learn more about the
# quick terminal, see the documentation for the `toggle_quick_terminal`
# binding action.
#
# Valid values are:
#
#   * `top` - Terminal appears at the top of the screen.
#   * `bottom` - Terminal appears at the bottom of the screen.
#   * `left` - Terminal appears at the left of the screen.
#   * `right` - Terminal appears at the right of the screen.
#   * `center` - Terminal appears at the center of the screen.
#
# Changing this configuration requires restarting Ghostty completely.
quick-terminal-position = top

# The screen where the quick terminal should show up.
#
# Valid values are:
#
#  * `main` - The screen that the operating system recommends as the main
#    screen. On macOS, this is the screen that is currently receiving
#    keyboard input. This screen is defined by the operating system and
#    not chosen by Ghostty.
#
#  * `mouse` - The screen that the mouse is currently hovered over.
#
#  * `macos-menu-bar` - The screen that contains the macOS menu bar as
#    set in the display settings on macOS. This is a bit confusing because
#    every screen on macOS has a menu bar, but this is the screen that
#    contains the primary menu bar.
#
# The default value is `main` because this is the recommended screen
# by the operating system.
quick-terminal-screen = main

# Duration (in seconds) of the quick terminal enter and exit animation.
# Set it to 0 to disable animation completely. This can be changed at
# runtime.
quick-terminal-animation-duration = 0.2

# Automatically hide the quick terminal when focus shifts to another window.
# Set it to false for the quick terminal to remain open even when it loses focus.
quick-terminal-autohide = true

# Whether to enable shell integration auto-injection or not. Shell integration
# greatly enhances the terminal experience by enabling a number of features:
#
#   * Working directory reporting so new tabs, splits inherit the
#     previous terminal's working directory.
#
#   * Prompt marking that enables the "jump_to_prompt" keybinding.
#
#   * If you're sitting at a prompt, closing a terminal will not ask
#     for confirmation.
#
#   * Resizing the window with a complex prompt usually paints much
#     better.
#
# Allowable values are:
#
#   * `none` - Do not do any automatic injection. You can still manually
#     configure your shell to enable the integration.
#
#   * `detect` - Detect the shell based on the filename.
#
#   * `bash`, `elvish`, `fish`, `zsh` - Use this specific shell injection scheme.
#
# The default value is `detect`.
shell-integration = detect

# Shell integration features to enable if shell integration itself is enabled.
# The format of this is a list of features to enable separated by commas. If
# you prefix a feature with `no-` then it is disabled. If you omit a feature,
# its default value is used, so you must explicitly disable features you don't
# want. You can also use `true` or `false` to turn all features on or off.
#
# Available features:
#
#   * `cursor` - Set the cursor to a blinking bar at the prompt.
#
#   * `sudo` - Set sudo wrapper to preserve terminfo.
#
#   * `title` - Set the window title via shell integration.
#
# Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`
shell-integration-features = cursor,no-sudo,title

# Sets the reporting format for OSC sequences that request color information.
# Ghostty currently supports OSC 10 (foreground), OSC 11 (background), and
# OSC 4 (256 color palette) queries, and by default the reported values
# are scaled-up RGB values, where each component are 16 bits. This is how
# most terminals report these values. However, some legacy applications may
# require 8-bit, unscaled, components. We also support turning off reporting
# altogether. The components are lowercase hex values.
#
# Allowable values are:
#
#   * `none` - OSC 4/10/11 queries receive no reply
#
#   * `8-bit` - Color components are return unscaled, i.e. `rr/gg/bb`
#
#   * `16-bit` - Color components are returned scaled, e.g. `rrrr/gggg/bbbb`
#
# The default value is `16-bit`.
osc-color-report-format = 16-bit

# If true, allows the "KAM" mode (ANSI mode 2) to be used within
# the terminal. KAM disables keyboard input at the request of the
# application. This is not a common feature and is not recommended
# to be enabled. This will not be documented further because
# if you know you need KAM, you know. If you don't know if you
# need KAM, you don't need it.
vt-kam-allowed = false

# Custom shaders to run after the default shaders. This is a file path
# to a GLSL-syntax shader for all platforms.
#
# Warning: Invalid shaders can cause Ghostty to become unusable such as by
# causing the window to be completely black. If this happens, you can
# unset this configuration to disable the shader.
#
# On Linux, this requires OpenGL 4.2. Ghostty typically only requires
# OpenGL 3.3, but custom shaders push that requirement up to 4.2.
#
# The shader API is identical to the Shadertoy API: you specify a `mainImage`
# function and the available uniforms match Shadertoy. The iChannel0 uniform
# is a texture containing the rendered terminal screen.
#
# If the shader fails to compile, the shader will be ignored. Any errors
# related to shader compilation will not show up as configuration errors
# and only show up in the log, since shader compilation happens after
# configuration loading on the dedicated render thread.  For interactive
# development, use [shadertoy.com](https://shadertoy.com).
#
# This can be repeated multiple times to load multiple shaders. The shaders
# will be run in the order they are specified.
#
# Changing this value at runtime and reloading the configuration will only
# affect new windows, tabs, and splits.
custom-shader =

# If `true` (default), the focused terminal surface will run an animation
# loop when custom shaders are used. This uses slightly more CPU (generally
# less than 10%) but allows the shader to animate. This only runs if there
# are custom shaders and the terminal is focused.
#
# If this is set to `false`, the terminal and custom shader will only render
# when the terminal is updated. This is more efficient but the shader will
# not animate.
#
# This can also be set to `always`, which will always run the animation
# loop regardless of whether the terminal is focused or not. The animation
# loop will still only run when custom shaders are used. Note that this
# will use more CPU per terminal surface and can become quite expensive
# depending on the shader and your terminal usage.
#
# This value can be changed at runtime and will affect all currently
# open terminals.
custom-shader-animation = true

# If anything other than false, fullscreen mode on macOS will not use the
# native fullscreen, but make the window fullscreen without animations and
# using a new space. It's faster than the native fullscreen mode since it
# doesn't use animations.
#
# Important: tabs DO NOT WORK in this mode. Non-native fullscreen removes
# the titlebar and macOS native tabs require the titlebar. If you use tabs,
# you should not use this mode.
#
# If you fullscreen a window with tabs, the currently focused tab will
# become fullscreen while the others will remain in a separate window in
# the background. You can switch to that window using normal window-switching
# keybindings such as command+tilde. When you exit fullscreen, the window
# will return to the tabbed state it was in before.
#
# Allowable values are:
#
#   * `visible-menu` - Use non-native macOS fullscreen, keep the menu bar visible
#   * `true` - Use non-native macOS fullscreen, hide the menu bar
#   * `false` - Use native macOS fullscreen
#
# Changing this option at runtime works, but will only apply to the next
# time the window is made fullscreen. If a window is already fullscreen,
# it will retain the previous setting until fullscreen is exited.
macos-non-native-fullscreen = true

# The style of the macOS titlebar. Available values are: "native",
# "transparent", "tabs", and "hidden".
#
# The "native" style uses the native macOS titlebar with zero customization.
# The titlebar will match your window theme (see `window-theme`).
#
# The "transparent" style is the same as "native" but the titlebar will
# be transparent and allow your window background color to come through.
# This makes a more seamless window appearance but looks a little less
# typical for a macOS application and may not work well with all themes.
#
# The "transparent" style will also update in real-time to dynamic
# changes to the window background color, i.e. via OSC 11. To make this
# more aesthetically pleasing, this only happens if the terminal is
# a window, tab, or split that borders the top of the window. This
# avoids a disjointed appearance where the titlebar color changes
# but all the topmost terminals don't match.
#
# The "tabs" style is a completely custom titlebar that integrates the
# tab bar into the titlebar. This titlebar always matches the background
# color of the terminal. There are some limitations to this style:
# On macOS 13 and below, saved window state will not restore tabs correctly.
# macOS 14 does not have this issue and any other macOS version has not
# been tested.
#
# The "hidden" style hides the titlebar. Unlike `window-decoration = false`,
# however, it does not remove the frame from the window or cause it to have
# squared corners. Changing to or from this option at run-time may affect
# existing windows in buggy ways. The top titlebar area of the window will
# continue to drag the window around and you will not be able to use
# the mouse for terminal events in this space.
#
# The default value is "transparent". This is an opinionated choice
# but its one I think is the most aesthetically pleasing and works in
# most cases.
#
# Changing this option at runtime only applies to new windows.
macos-titlebar-style = transparent

# Whether the proxy icon in the macOS titlebar is visible. The proxy icon
# is the icon that represents the folder of the current working directory.
# You can see this very clearly in the macOS built-in Terminal.app
# titlebar.
#
# The proxy icon is only visible with the native macOS titlebar style.
#
# Valid values are:
#
#   * `visible` - Show the proxy icon.
#   * `hidden` - Hide the proxy icon.
#
# The default value is `visible`.
#
# This setting can be changed at runtime and will affect all currently
# open windows but only after their working directory changes again.
# Therefore, to make this work after changing the setting, you must
# usually `cd` to a different directory, open a different file in an
# editor, etc.
macos-titlebar-proxy-icon = visible

# macOS doesn't have a distinct "alt" key and instead has the "option"
# key which behaves slightly differently. On macOS by default, the
# option key plus a character will sometimes produces a Unicode character.
# For example, on US standard layouts option-b produces "∫". This may be
# undesirable if you want to use "option" as an "alt" key for keybindings
# in terminal programs or shells.
#
# This configuration lets you change the behavior so that option is treated
# as alt.
#
# The default behavior (unset) will depend on your active keyboard
# layout. If your keyboard layout is one of the keyboard layouts listed
# below, then the default value is "true". Otherwise, the default
# value is "false". Keyboard layouts with a default value of "true" are:
#
#   - U.S. Standard
#   - U.S. International
#
# Note that if an *Option*-sequence doesn't produce a printable character, it
# will be treated as *Alt* regardless of this setting. (i.e. `alt+ctrl+a`).
#
# Explicit values that can be set:
#
# If `true`, the *Option* key will be treated as *Alt*. This makes terminal
# sequences expecting *Alt* to work properly, but will break Unicode input
# sequences on macOS if you use them via the *Alt* key.
#
# You may set this to `false` to restore the macOS *Alt* key unicode
# sequences but this will break terminal sequences expecting *Alt* to work.
#
# The values `left` or `right` enable this for the left or right *Option*
# key, respectively.
#
# This does not work with GLFW builds.
macos-option-as-alt = true

# Whether to enable the macOS window shadow. The default value is true.
# With some window managers and window transparency settings, you may
# find false more visually appealing.
macos-window-shadow = true

# If true, Ghostty on macOS will automatically enable the "Secure Input"
# feature when it detects that a password prompt is being displayed.
#
# "Secure Input" is a macOS security feature that prevents applications from
# reading keyboard events. This can always be enabled manually using the
# `Ghostty > Secure Keyboard Entry` menu item.
#
# Note that automatic password prompt detection is based on heuristics
# and may not always work as expected. Specifically, it does not work
# over SSH connections, but there may be other cases where it also
# doesn't work.
#
# A reason to disable this feature is if you find that it is interfering
# with legitimate accessibility software (or software that uses the
# accessibility APIs), since secure input prevents any application from
# reading keyboard events.
macos-auto-secure-input = true

# If true, Ghostty will show a graphical indication when secure input is
# enabled. This indication is generally recommended to know when secure input
# is enabled.
#
# Normally, secure input is only active when a password prompt is displayed
# or it is manually (and typically temporarily) enabled. However, if you
# always have secure input enabled, the indication can be distracting and
# you may want to disable it.
macos-secure-input-indication = true

# Customize the macOS app icon.
#
# This only affects the icon that appears in the dock, application
# switcher, etc. This does not affect the icon in Finder because
# that is controlled by a hardcoded value in the signed application
# bundle and can't be changed at runtime. For more details on what
# exactly is affected, see the `NSApplication.icon` Apple documentation;
# that is the API that is being used to set the icon.
#
# Valid values:
#
#  * `official` - Use the official Ghostty icon.
#  * `custom-style` - Use the official Ghostty icon but with custom
#    styles applied to various layers. The custom styles must be
#    specified using the additional `macos-icon`-prefixed configurations.
#    The `macos-icon-ghost-color` and `macos-icon-screen-color`
#    configurations are required for this style.
#
# WARNING: The `custom-style` option is _experimental_. We may change
# the format of the custom styles in the future. We're still finalizing
# the exact layers and customization options that will be available.
#
# Other caveats:
#
#   * The icon in the update dialog will always be the official icon.
#     This is because the update dialog is managed through a
#     separate framework and cannot be customized without significant
#     effort.
#
macos-icon = official

# The material to use for the frame of the macOS app icon.
#
# Valid values:
#
#  * `aluminum` - A brushed aluminum frame. This is the default.
#  * `beige` - A classic 90's computer beige frame.
#  * `plastic` - A glossy, dark plastic frame.
#  * `chrome` - A shiny chrome frame.
#
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-frame = aluminum

# The color of the ghost in the macOS app icon.
#
# The format of the color is the same as the `background` configuration;
# see that for more information.
#
# Note: This configuration is required when `macos-icon` is set to
# `custom-style`.
#
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-ghost-color =

# The color of the screen in the macOS app icon.
#
# The screen is a gradient so you can specify multiple colors that
# make up the gradient. Colors should be separated by commas. The
# format of the color is the same as the `background` configuration;
# see that for more information.
#
# Note: This configuration is required when `macos-icon` is set to
# `custom-style`.
#
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-screen-color =

# Put every surface (tab, split, window) into a dedicated Linux cgroup.
#
# This makes it so that resource management can be done on a per-surface
# granularity. For example, if a shell program is using too much memory,
# only that shell will be killed by the oom monitor instead of the entire
# Ghostty process. Similarly, if a shell program is using too much CPU,
# only that surface will be CPU-throttled.
#
# This will cause startup times to be slower (a hundred milliseconds or so),
# so the default value is "single-instance." In single-instance mode, only
# one instance of Ghostty is running (see gtk-single-instance) so the startup
# time is a one-time cost. Additionally, single instance Ghostty is much
# more likely to have many windows, tabs, etc. so cgroup isolation is a
# big benefit.
#
# This feature requires systemd. If systemd is unavailable, cgroup
# initialization will fail. By default, this will not prevent Ghostty
# from working (see linux-cgroup-hard-fail).
#
# Valid values are:
#
#   * `never` - Never use cgroups.
#   * `always` - Always use cgroups.
#   * `single-instance` - Enable cgroups only for Ghostty instances launched
#     as single-instance applications (see gtk-single-instance).
#
linux-cgroup = single-instance

# Memory limit for any individual terminal process (tab, split, window,
# etc.) in bytes. If this is unset then no memory limit will be set.
#
# Note that this sets the "memory.high" configuration for the memory
# controller, which is a soft limit. You should configure something like
# systemd-oom to handle killing processes that have too much memory
# pressure.
linux-cgroup-memory-limit =

# Number of processes limit for any individual terminal process (tab, split,
# window, etc.). If this is unset then no limit will be set.
#
# Note that this sets the "pids.max" configuration for the process number
# controller, which is a hard limit.
linux-cgroup-processes-limit =

# If this is false, then any cgroup initialization (for linux-cgroup)
# will be allowed to fail and the failure is ignored. This is useful if
# you view cgroup isolation as a "nice to have" and not a critical resource
# management feature, because Ghostty startup will not fail if cgroup APIs
# fail.
#
# If this is true, then any cgroup initialization failure will cause
# Ghostty to exit or new surfaces to not be created.
#
# Note: This currently only affects cgroup initialization. Subprocesses
# must always be able to move themselves into an isolated cgroup.
linux-cgroup-hard-fail = false

# If `true`, the Ghostty GTK application will run in single-instance mode:
# each new `ghostty` process launched will result in a new window if there is
# already a running process.
#
# If `false`, each new ghostty process will launch a separate application.
#
# The default value is `detect` which will default to `true` if Ghostty
# detects that it was launched from the `.desktop` file such as an app
# launcher (like Gnome Shell)  or by D-Bus activation. If Ghostty is launched
# from the command line, it will default to `false`.
#
# Note that debug builds of Ghostty have a separate single-instance ID
# so you can test single instance without conflicting with release builds.
gtk-single-instance = desktop

# When enabled, the full GTK titlebar is displayed instead of your window
# manager's simple titlebar. The behavior of this option will vary with your
# window manager.
#
# This option does nothing when `window-decoration` is false or when running
# under macOS.
#
# Changing this value at runtime and reloading the configuration will only
# affect new windows.
gtk-titlebar = true

# Determines the side of the screen that the GTK tab bar will stick to.
# Top, bottom, left, right, and hidden are supported. The default is top.
#
# If this option has value `left` or `right` when using Adwaita, it falls
# back to `top`. `hidden`, meaning that tabs don't exist, is not supported
# without using Adwaita, falling back to `top`.
#
# When `hidden` is set and Adwaita is enabled, a tab button displaying the
# number of tabs will appear in the title bar. It has the ability to open a
# tab overview for displaying tabs. Alternatively, you can use the
# `toggle_tab_overview` action in a keybind if your window doesn't have a
# title bar, or you can switch tabs with keybinds.
gtk-tabs-location = top

# Determines the appearance of the top and bottom bars when using the
# Adwaita tab bar. This requires `gtk-adwaita` to be enabled (it is
# by default).
#
# Valid values are:
#
#  * `flat` - Top and bottom bars are flat with the terminal window.
#  * `raised` - Top and bottom bars cast a shadow on the terminal area.
#  * `raised-border` - Similar to `raised` but the shadow is replaced with a
#    more subtle border.
#
# Changing this value at runtime will only affect new windows.
adw-toolbar-style = raised

# If `true` (default), then the Ghostty GTK tabs will be "wide." Wide tabs
# are the new typical Gnome style where tabs fill their available space.
# If you set this to `false` then tabs will only take up space they need,
# which is the old style.
gtk-wide-tabs = true

# If `true` (default), Ghostty will enable Adwaita theme support. This
# will make `window-theme` work properly and will also allow Ghostty to
# properly respond to system theme changes, light/dark mode changing, etc.
# This requires a GTK4 desktop with a GTK4 theme.
#
# If you are running GTK3 or have a GTK3 theme, you may have to set this
# to false to get your theme picked up properly. Having this set to true
# with GTK3 should not cause any problems, but it may not work exactly as
# expected.
#
# This configuration only has an effect if Ghostty was built with
# Adwaita support.
gtk-adwaita = true

# If `true` (default), applications running in the terminal can show desktop
# notifications using certain escape sequences such as OSC 9 or OSC 777.
desktop-notifications = true

# If `true`, the bold text will use the bright color palette.
bold-is-bright = false

# This will be used to set the `TERM` environment variable.
# HACK: We set this with an `xterm` prefix because vim uses that to enable key
# protocols (specifically this will enable `modifyOtherKeys`), among other
# features. An option exists in vim to modify this: `:set
# keyprotocol=ghostty:kitty`, however a bug in the implementation prevents it
# from working properly. https://github.com/vim/vim/pull/13211 fixes this.
term = xterm-ghostty

# String to send when we receive `ENQ` (`0x05`) from the command that we are
# running. Defaults to an empty string if not set.
enquiry-response =

# Control the auto-update functionality of Ghostty. This is only supported
# on macOS currently, since Linux builds are distributed via package
# managers that are not centrally controlled by Ghostty.
#
# Checking or downloading an update does not send any information to
# the project beyond standard network information mandated by the
# underlying protocols. To put it another way: Ghostty doesn't explicitly
# add any tracking to the update process. The update process works by
# downloading information about the latest version and comparing it
# client-side to the current version.
#
# Valid values are:
#
#  * `off` - Disable auto-updates.
#  * `check` - Check for updates and notify the user if an update is
#    available, but do not automatically download or install the update.
#  * `download` - Check for updates, automatically download the update,
#    notify the user, but do not automatically install the update.
#
# The default value is `check`.
#
# Changing this value at runtime works after a small delay.
auto-update = check

# The release channel to use for auto-updates.
#
# The default value of this matches the release channel of the currently
# running Ghostty version. If you download a pre-release version of Ghostty
# then this will be set to `tip` and you will receive pre-release updates.
# If you download a stable version of Ghostty then this will be set to
# `stable` and you will receive stable updates.
#
# Valid values are:
#
#  * `stable` - Stable, tagged releases such as "1.0.0".
#  * `tip` - Pre-release versions generated from each commit to the
#
auto-update-channel = stable
